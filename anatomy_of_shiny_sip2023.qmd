---
title: "Anatomy of a Shiny app"
subtitle: "Shiny in Production 2023"
institute: "Barnett Waddingham"
author: "Chris Brownlie"
date: "2023-10-13"
date-format: "Do MMM YYYY"
format:
  revealjs: 
    theme: [dark, custom.scss]
    footer: "Shiny in Production 2023"
    embed-resources: true
    output-file: index.html
    slide-number: true
---

## About me

- Chris Brownlie
- Analytics consultant @ Barnett Waddingham
- 5 years with R & shiny
- Expertise on {shiny} and processes

## It is a weird title

- Anatomy of a shiny app AKA a high level look at the {shiny} source code
- This will be theoretical, but bear with me - it will be worth it!
- What I won't be talking about:
  - javascript & websockets
  - UI design
  - deployment/infrastructure
  
## What do you mean 'anatomy'?

- Visible = UI
- Brain = Server
- *Organs = {shiny} and friends*
 
## My hopes and dreams (for this talk)

- Better mental model
- De-magic-ify
- Improve app design

## Pre-requisite: R6

- {R6} provides a method of OOP
- Important for {shiny}
- Reference semantics

## [A subjective classification]{.smaller}

![Shiny R6 classes](img/shiny_r6_classes6.png)

## When are they created

- **On load**: RLog, TimerCallbacks, HandlerManager
- **In `runApp()`**: [ShinySession]{.col-cyan}, Bookmarking classes
- **In the app event loop**: [ReactiveEnvironment]{.col-cyan}, Core Helpers
- **User-dependent** (mostly):
  - [ReactiveVal]{.col-cyan} (`reactiveVal()`)
  - [ReactiveValues]{.col-cyan} (`reactiveValues()`)
  - [Observers]{.col-cyan} (`observe()`, `observeEvent()`, `render_X()`)
  - [Observable]{.col-cyan} (`reactive()`)

## [ShinySession]{.col-cyan}

- You might recognise: `session`
- Contains instances of most helper/core helper classes
- Important tasks
  - Communicates with browser via websockets
  - Handles outputs in the server
  - Initiates and manages 'cycles'

<!-- ## Stars of the show - [RLog]{.col-cyan} -->

<!-- - Logs actions on the reactive graph -->
<!-- - When things get invalidated etc. -->
<!-- - An instance of this is initiated (rLog) when the package is loaded -->

## [ReactiveEnvironment]{.col-cyan} & [Context]{.col-cyan}

- ReactiveEnvironment keeps track of Contexts
- Contexts can be **invalidated** (notify the ReactiveEnvironment they need to be 'flushed')
- Contexts can be **flushed** (the function is run)

## [ReactiveVal]{.col-cyan} & [ReactiveValues]{.col-cyan}

- You might recognise: `reactiveVal()` and `reactiveValues()`
- Distinct but similiar
- Keep track of value, label and dependents

## [Observer]{.col-cyan}

- You might recognise: `observe()`/`observeEvent()`
- Handling for invalidation (a non-isolated reactive value changes)
- Handling for flushes (app cycle, values have been recalculated)

## [Observable]{.col-cyan}

- You might recognise: `reactive()`
- Turns an expression into a function
- Notifies dependents


## What is the point of all this?

- Some common design mistakes
- reactive vs observe
  - i.e. ReactiveVal/ues vs Observable vs Observer
- Overly reactive expressions
  - Understanding the reactive graph
- Misunderstanding modules
  - ShinySession, namespaces and input-output interactions

## To conclude

- Might seem unimportant, hidden for a reason
- Mental models are hard
- Understanding the tools we use is good

## Just for fun {.column-screen .smaller}

My favourite comments from the {shiny} source code

*(AKA shiny devs are like you and me)*


![](img/funny_comments/abusing_downloads.PNG)
![](img/funny_comments/bunch_of_ugliness.PNG)
![](img/funny_comments/horribly_inefficient.PNG)
![](img/funny_comments/not_sure_why.PNG)
![](img/funny_comments/pity_about_copy_paste.PNG)
![](img/funny_comments/sob.PNG)
![](img/funny_comments/super_paranoid.PNG)
![](img/funny_comments/throw_yes_throw.PNG)
